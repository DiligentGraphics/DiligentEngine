Texture2D<float4> g_SubpassInputColor;
SamplerState      g_SubpassInputColor_sampler;

Texture2D<float4> g_SubpassInputDepthZ;
SamplerState      g_SubpassInputDepthZ_sampler;

struct PSInput
{ 
    float4 Pos           : SV_POSITION; 
    float4 LightLocation : LIGHT_LOCATION;
    float3 LightColor    : LIGHT_COLOR;
};

cbuffer ShaderConstants
{
    float4x4 g_ViewProj;
    float4x4 g_ViewProjInv;
    float4   g_ViewportSize;
    int      g_ShowLightVolumes;
};

struct PSOutput
{
    float4 Color : SV_TARGET0;
};

void main(in  PSInput  PSIn,
          out PSOutput PSOut)
{
    // Load depth from subpass input
    float Depth = g_SubpassInputDepthZ.Load(int3(PSIn.Pos.xy, 0)).x;
    // Get clip-space position
    float4 ClipSpacePos = float4(PSIn.Pos.xy * g_ViewportSize.zw * float2(2.0, -2.0) + float2(-1.0, 1.0), Depth, 1.0);
#if defined(DESKTOP_GL) || defined(GL_ES)
    // Invery y coordinate for OpenGL
    ClipSpacePos.y *= -1.0;
#endif
    // Reconstruct world position by applying inverse view-projection matrix
    float4 WorldPos = mul(ClipSpacePos, g_ViewProjInv);
    WorldPos.xyz /= WorldPos.w;
    // Compute distance to light
    float DistToLight = length(WorldPos.xyz - PSIn.LightLocation.xyz);
    float LightRadius = PSIn.LightLocation.w;
    // Compute simple distance-based attenuation
    float Attenuation = clamp(1.0 - DistToLight/LightRadius, 0.0, 1.0);
    if (Attenuation == 0.0 && g_ShowLightVolumes == 0)
    {
        // The pixel is not affected by this light - discard it to
        // save bandwidth
        discard;
    }

    // Load color and apply light to it
    float3 Color = g_SubpassInputColor.Load(int3(PSIn.Pos.xy, 0)).rgb;
    PSOut.Color.rgb = Color.rgb * PSIn.LightColor.rgb * Attenuation;
    if (g_ShowLightVolumes != 0)
        PSOut.Color.rgb += PSIn.LightColor.rgb * 0.05;

    PSOut.Color.a = 1.0;
}
